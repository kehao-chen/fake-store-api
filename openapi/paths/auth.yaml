# 認證相關 API 端點定義
auth_token:
  post:
    tags:
      - Authentication
    summary: 建立身份令牌
    description: |
      使用使用者憑證建立 JWT 存取令牌和刷新令牌。
      
      ## 支援的認證方式
      - Email + 密碼
      - OAuth 授權碼 (Google/GitHub)
      
      ## 令牌有效期
      - 存取令牌：1 小時
      - 刷新令牌：7 天
      
    operationId: createToken
    requestBody:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '../components/schemas/auth.yaml#/EmailLoginRequest'
              - $ref: '../components/schemas/auth.yaml#/OAuthTokenRequest'
              - $ref: '../components/schemas/auth.yaml#/RefreshTokenRequest'
          examples:
            email_login:
              summary: Email 登入
              value:
                grant_type: "password"
                email: "user@example.com"
                password: "securePassword123"
            oauth_code:
              summary: OAuth 授權碼
              value:
                grant_type: "authorization_code"
                code: "oauth_authorization_code"
                code_verifier: "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
            refresh_token:
              summary: 刷新令牌
              value:
                grant_type: "refresh_token"
                refresh_token: "refresh_token_value"
    responses:
      '200':
        description: 令牌建立成功
        content:
          application/json:
            schema:
              $ref: '../components/schemas/auth.yaml#/TokenResponse'
        headers:
          Cache-Control:
            description: 快取控制
            schema:
              type: string
              example: "no-store"
      '400':
        $ref: '../components/responses/errors.yaml#/BadRequest'
      '401':
        $ref: '../components/responses/errors.yaml#/Unauthorized'
      '429':
        $ref: '../components/responses/errors.yaml#/RateLimitExceeded'

auth_google:
  get:
    tags:
      - Authentication
    summary: Google OAuth 2.0 登入
    description: |
      啟動 Google OAuth 2.0 認證流程。
      
      ## 流程說明
      1. 重定向到 Google 授權頁面
      2. 使用者授權後返回授權碼
      3. 使用授權碼呼叫 `/auth/token` 取得令牌
      
      ## PKCE 支援
      - 必須使用 PKCE (RFC 7636) 增強安全性
      - 支援 `code_challenge` 和 `code_verifier`
      
    operationId: loginWithGoogle
    parameters:
      - name: redirect_uri
        in: query
        required: true
        description: 授權後重定向 URI
        schema:
          type: string
          format: uri
          example: "https://yourapp.com/callback"
      - name: state
        in: query
        required: true
        description: CSRF 防護狀態參數
        schema:
          type: string
          minLength: 8
          example: "random_state_string"
      - name: code_challenge
        in: query
        required: true
        description: PKCE 代碼挑戰
        schema:
          type: string
          example: "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
      - name: code_challenge_method
        in: query
        required: true
        description: PKCE 代碼挑戰方法
        schema:
          type: string
          enum: ["S256"]
    responses:
      '302':
        description: 重定向到 Google 授權頁面
        headers:
          Location:
            description: Google OAuth 授權 URL
            schema:
              type: string
              format: uri
      '400':
        $ref: '../components/responses/errors.yaml#/BadRequest'

auth_github:
  get:
    tags:
      - Authentication
    summary: GitHub OAuth 2.0 登入
    description: |
      啟動 GitHub OAuth 2.0 認證流程。
      
      ## 流程說明
      1. 重定向到 GitHub 授權頁面
      2. 使用者授權後返回授權碼
      3. 使用授權碼呼叫 `/auth/token` 取得令牌
      
      ## 權限範圍
      - `read:user` - 讀取基本使用者資訊
      - `user:email` - 讀取使用者 Email
      
    operationId: loginWithGitHub
    parameters:
      - name: redirect_uri
        in: query
        required: true
        description: 授權後重定向 URI
        schema:
          type: string
          format: uri
          example: "https://yourapp.com/callback"
      - name: state
        in: query
        required: true
        description: CSRF 防護狀態參數
        schema:
          type: string
          minLength: 8
          example: "random_state_string"
      - name: code_challenge
        in: query
        required: true
        description: PKCE 代碼挑戰
        schema:
          type: string
      - name: code_challenge_method
        in: query
        required: true
        description: PKCE 代碼挑戰方法
        schema:
          type: string
          enum: ["S256"]
    responses:
      '302':
        description: 重定向到 GitHub 授權頁面
        headers:
          Location:
            description: GitHub OAuth 授權 URL
            schema:
              type: string
              format: uri
      '400':
        $ref: '../components/responses/errors.yaml#/BadRequest'

auth_refresh:
  post:
    tags:
      - Authentication
    summary: 刷新 JWT Token
    description: |
      使用有效的刷新令牌獲取新的存取令牌。
      
      ## 功能特性
      - JWT Token 有效期 15 分鐘，需要定期刷新
      - 刷新令牌有效期 7 天
      - 支援 Token 撤銷機制
      - 自動檢測令牌洩露風險
      
      ## 安全機制
      - 刷新令牌一次性使用（舊令牌立即失效）
      - 令牌輪換 (Token Rotation) 機制
      - 檢測重複使用攻擊
      
    operationId: refreshToken
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refresh_token
            properties:
              refresh_token:
                type: string
                description: 有效的刷新令牌
                example: "rt_1A2B3C4D5E6F7G8H9I0J"
              revoke_old_tokens:
                type: boolean
                default: false
                description: 是否撤銷該使用者的所有舊令牌
          examples:
            standard_refresh:
              summary: 標準令牌刷新
              value:
                refresh_token: "rt_1A2B3C4D5E6F7G8H9I0J"
            security_refresh:
              summary: 安全模式刷新（撤銷舊令牌）
              value:
                refresh_token: "rt_1A2B3C4D5E6F7G8H9I0J"
                revoke_old_tokens: true
    responses:
      '200':
        description: 令牌刷新成功
        content:
          application/json:
            schema:
              type: object
              required:
                - access_token
                - refresh_token
                - token_type
                - expires_in
              properties:
                access_token:
                  type: string
                  description: 新的存取令牌
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refresh_token:
                  type: string
                  description: 新的刷新令牌
                  example: "rt_K1L2M3N4O5P6Q7R8S9T0"
                token_type:
                  type: string
                  description: 令牌類型
                  example: "Bearer"
                expires_in:
                  type: integer
                  description: 存取令牌有效期（秒）
                  example: 900
                scope:
                  type: string
                  description: 令牌權限範圍
                  example: "read write"
                issued_at:
                  type: string
                  format: date-time
                  description: 令牌發行時間
                  example: "2025-08-19T15:00:00Z"
            examples:
              refresh_success:
                summary: 刷新成功
                value:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refresh_token: "rt_K1L2M3N4O5P6Q7R8S9T0"
                  token_type: "Bearer"
                  expires_in: 900
                  scope: "read write"
                  issued_at: "2025-08-19T15:00:00Z"
        headers:
          Cache-Control:
            description: 快取控制
            schema:
              type: string
              example: "no-store"
          X-Token-Rotation:
            description: 令牌輪換狀態
            schema:
              type: string
              example: "completed"
      '400':
        $ref: '../components/responses/errors.yaml#/BadRequest'
      '401':
        $ref: '../components/responses/errors.yaml#/Unauthorized'
      '429':
        $ref: '../components/responses/errors.yaml#/RateLimitExceeded'
      '500':
        $ref: '../components/responses/errors.yaml#/InternalError'
